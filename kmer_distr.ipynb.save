q{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from Bio import SeqIO\n",
    "import pandas as pd\n",
    "from collections import Counter\n",
    "\n",
    "class Kmer():\n",
    "    \n",
    "    def __init__(self):\n",
    "        \n",
    "        self.kmer_dict = Counter()\n",
    "        self.kmer_distr = Counter()\n",
    "          \n",
    "    #парсим файл, фильтруем риды по качеству и заполняем словарь к-меров\n",
    "    def fq_parse(self, file, size, qual):\n",
    "\n",
    "        self.kmer_size = size\n",
    "        self.handle = SeqIO.parse(file, 'fastq')\n",
    "        self.q = qual\n",
    "        for seq in self.handle:\n",
    "\n",
    "            for index in range(len(seq.seq) - self.kmer_size+1):\n",
    "                self.current_kmer = seq.seq[index:(index + self.kmer_size)]\n",
    "\n",
    "                if all(x < self.q for x in seq.letter_annotations['phred_quality'][index:(index + self.kmer_size)]):\n",
    "                    \n",
    "                    self.kmer_dict[str(self.current_kmer)] += 1\n",
    "        \n",
    "        return self.kmer_dict\n",
    "    \n",
    "    #переводим словарь с к-мерами в массив и сразу убираем шум:\n",
    "    def to_array(self, kmerdict):\n",
    "        \n",
    "        \n",
    "        for i, j in self.kmer_dict.items():\n",
    "            if j > 1:\n",
    "                self.kmer_distr[j] += 1\n",
    "        \n",
    "        self.plot_data = [[j]*i for i, j in self.kmer_distr.items() if j > 1 ]\n",
    "        \n",
    "        print(self.kmer_dict)\n",
    "        print(self.kmer_distr)\n",
    "        print(self.plot_data)\n",
    "        \n",
    "    #визуализируем распределение\n",
    "    def viz_distr(self, data, maxX, stepX, maxY, stepY):\n",
    "\n",
    "        plt.hist(data, bins=50, facecolor='g',ec='k')\n",
    "        plt.axis([0,maxX, 0, maxY])\n",
    "        plt.xlabel('counts k-mer')\n",
    "        plt.ylabel('frequency')\n",
    "        plt.xticks([i for i in range(0,maxX,stepX)], size=5)\n",
    "        plt.yticks([i for i in range(0,maxY, stepY)])\n",
    "        plt.title('Histogram of k-mer distribution')\n",
    "\n",
    "    #считаем примерный размер генома\n",
    "    def genome_length(self):\n",
    "       \n",
    "        self.genome_size = sum(map(lambda x: len(x)*x[0], self.plot_data))/(max(self.plot_data, key=len))[0]\n",
    "        print(round(self. genome_size))\n",
    "        \n",
    "data = Kmer()\n",
    "data.fq_parse('Загрузки/test_kmer.fastq', 10, 30)\n",
    "data.to_array(data.kmer_dict)\n",
    "data.viz_distr(data.plot_data, 4000, 200, 40, 5)\n",
    "data.genome_length()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
